
// TODO
//
// use something other than STR0 for storing the main data
//
// make an archiving wrapper around this

//input : Ans - string
//output: Ans - string ||| a - 0[don't save returned data] 1[save returned data]
//trash : STR0-STR5 STR7 STR8

#include "common.h"

Ans->STR0

prgmPUSHB
prgmPUSHC
prgmPUSHD
prgmPUSHE
prgmPUSHF
prgmPUSHG

//////////////////////////////////////////// defines

#define DEF_CHARS_PER_LINE 14

#define DEF_LINES_PASS_ON_BTN_PRESS 4

#define DEF_LINES_PER_SCREEN 6

//////////////////////////////////////////// constants
// using variables and not raw values since
// this is faster in tibasic

#define CONST_CHARS_PER_LINE e
DEF_CHARS_PER_LINE->CONST_CHARS_PER_LINE

#define CONST_LINES_PASS_ON_BTN_PRESS f
DEF_LINES_PASS_ON_BTN_PRESS->CONST_LINES_PASS_ON_BTN_PRESS

#define CONST_LINES_PER_SCREEN g
DEF_LINES_PER_SCREEN->CONST_LINES_PER_SCREEN

//////////////////////////////////////////// variables

#define VAR_START_IDX d
1->VAR_START_IDX

////////////////////////////////////////////

If length(STR0)=0
    " "->STR0

Lbl rl // refresh lines

    // handle go back
    max(1,VAR_START_IDX)->VAR_START_IDX

    Disp "max..."

    // handle go forward
    STR0
    While length(Ans)<VAR_START_IDX+CONST_CHARS_PER_LINE*CONST_LINES_PER_SCREEN-1
        Ans+" "
    End
    Ans->STR0

    Disp "cut..."

    // this seems bad but is actually not too slow
    ${for <line_num> 0 DEF_LINES_PER_SCREEN 
        sub(STR0,VAR_START_IDX+CONST_CHARS_PER_LINE*<line_num>,CONST_CHARS_PER_LINE)->STR${add <line_num> 1}
    }

    Disp "calc idx..."

    STR0->STR7

    (VAR_START_IDX-1)/CONST_CHARS_PER_LINE->a
    prgmNUMTOSTR
    //input : a
    //return: STR0
    //trash : L1 L2 Y1
    "s"+STR0->STR8

    a+CONST_LINES_PER_SCREEN->a
    prgmNUMTOSTR
    //input : a
    //return: STR0
    //trash : L1 L2 Y1
    STR8+" e"+STR0->STR8

    a+CONST_LINES_PASS_ON_BTN_PRESS->a
    prgmNUMTOSTR
    //input : a
    //return: STR0
    //trash : L1 L2 Y1
    STR8+" n"+STR0->STR8

    length(STR7)/CONST_CHARS_PER_LINE->a
    prgmNUMTOSTR
    //input : a
    //return: STR0
    //trash : L1 L2 Y1
    STR8+" t"+STR0->STR8

    STR7->STR0

    Disp "done"

Lbl mm // main menu

    Menu(STR8,${for <line_num> 0 DEF_LINES_PER_SCREEN STR${add 1 <line_num>},l${add 1 <line_num>},}"<action>",ac)

    ${for <line_num> 0 DEF_LINES_PER_SCREEN 
        Lbl l${add 1 <line_num>}
            ${add 1 <line_num>}->b
            Goto la
    }

    Lbl la // line action

    Menu("line action","<edit>",pe,"<TODO insert>",la,"<TODO append>",la,"",la,"",la,"<delete>",dl,"<back>",rl)
    // we could replace `rl` with `mm` if it turns out to be too slow

    Lbl dl // delete line

        " "
        ${for <line_num> 0 DEF_LINES_PER_SCREEN 
            If b!=${add 1 <line_num>}
                Ans+STR${add 1 <line_num>}
        }
        
        sub(Ans,2,length(Ans)-1)->STR7

        Goto ci // ductape string back together

    Lbl pe // prepare eidt

    ${for <line_num> 0 DEF_LINES_PER_SCREEN 
        If b=${add 1 <line_num>}
            STR${add 1 <line_num>}
    }

    // get input from stdin

        Ans->STR7

        Disp "--- old line ---"
        Disp ">>"+STR7
        Disp "--- new line ---"
        Input ">>",STR7

        length(STR7)->c

        If c=0
        Then
            " "->STR7
            1->c
        End

        // fill with whitespace until is divisable by line
        While remainder(c,CONST_CHARS_PER_LINE)!=0
            STR7+" "->STR7
            c+1->c
        End

        If b=1
        Then
            STR7
        Else
            STR1
        End

        ${for <line_num> 1 DEF_LINES_PER_SCREEN 
            If b=${add 1 <line_num>}
            Then
                Ans+STR7
            Else
                Ans+STR${add 1 <line_num>}
            End
        }

        Ans->STR7
    
    Lbl ci // use cached input

    // fuck tibasic
    "?"+STR0+"?"->STR0
    VAR_START_IDX+1->VAR_START_IDX

    // // this replaces STR0 cont with STR7
    // sub(STR0,1,VAR_START_IDX-1) // prefix
    // Ans+STR7 // middle part
    // Ans+sub(STR0,VAR_START_IDX+length(STR7),length(STR0)-VAR_START_IDX-length(STR7)+1) // suffix

    // this inserts new STR7 where old STR1+STR2+STR... would have been
    CONST_CHARS_PER_LINE*CONST_LINES_PER_SCREEN->a // original length of blocks shown on screen
    sub(STR0,1,VAR_START_IDX-1) // prefix
    Ans+STR7 // middle part
    Ans+sub(STR0,VAR_START_IDX+a,length(STR0)-VAR_START_IDX-a+1) // suffix

    // remove the useless chars added earlier
    sub(Ans,2,length(Ans)-2)->STR0
    VAR_START_IDX-1->VAR_START_IDX

    ""->STR7 // clear var

    Goto rl

Lbl ac: // action

    Menu("action","<save+exit>",se,"<discard+exit>",de,"",ac,"<prev>",pp,"<next>",np,"",ac,"<back>",mm)

    Lbl pp: // prev
        VAR_START_IDX-CONST_CHARS_PER_LINE*CONST_LINES_PASS_ON_BTN_PRESS->VAR_START_IDX
        Goto rl

    Lbl np: // next
        VAR_START_IDX+CONST_CHARS_PER_LINE*CONST_LINES_PASS_ON_BTN_PRESS->VAR_START_IDX
        Goto rl

    Lbl de: // discard and exit
        0->a // tell callee to not save returned data
        Goto rt

    Lbl se: // save and exit
        1->a // tell calee to save returned data
        Goto rt

Lbl rt: // return

""->STR1
""->STR2
""->STR3
""->STR4
""->STR5
""->STR7
""->STR8

prgmPOPG
prgmPOPF
prgmPOPE
prgmPOPD
prgmPOPC
prgmPOPB

STR0 // set Ans
