
# TODO
#
# additional return var that indicates if the content was changed
#
# use something other than STR0 for storing the main data

#input : Ans - string
#output: Ans - string
#trash : STR0-STR4 STR7 STR8 STR9


Ans->STR0

prgmPUSHA
prgmPUSHB
prgmPUSHC
prgmPUSHD
prgmPUSHE
prgmPUSHF

###################### defines
14->e # characters per line
2->f # pages passed on press of prev/next
1->d # start index
######################

STR0->STR9 # save original string so that it can be recovered if the user decides to discard the changes

If length(STR0)=0
    " "->STR0

Lbl rl # refresh lines

    # handle go back
    If d<1
    Then
        1->d
    End

    # handle go forward
    While length(STR0)<d+e*4
        STR0+" "->STR0
    End

    # this seems like shit but is actually not too slow
    sub(STR0,d+e*0,e)->STR1
    sub(STR0,d+e*1,e)->STR2
    sub(STR0,d+e*2,e)->STR3
    sub(STR0,d+e*3,e)->STR4

    STR0->STR7

    (d-1)/e->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    "s"+STR0->STR8

    a+4->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" e"+STR0->STR8

    a+f->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" n"+STR0->STR8

    (length(STR7)-1)/e->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" t"+STR0->STR8

    STR7->STR0

Lbl mm # main menu

    Menu(STR8,"<action>",ac,STR1,l1,STR2,l2,STR3,l3,STR4,l4)

    Lbl l1:
        1->b
        STR1
        Goto pe

    Lbl l2:
        2->b
        STR2
        Goto pe

    Lbl l3:
        3->b
        STR3
        Goto pe

    Lbl l4:
        4->b
        STR4
        Goto pe

    Lbl pe # prepare eidt

    # b - indicates which STR we're modifying

    Ans->STR7

    # TODO just use output, it will skip the scroll animation
    Disp "----------------"
    Disp ">>"+STR7 # `>` needs to be updated; TODO check if we can automate this quickly
    Disp "----------------"
    Input ">>",STR7

    length(STR7)->c

    If c=0
    Then
        " "->STR7
        1->c
    End

    # fill with whitespace until is divisable by line
    While remainder(c,e)!=0
        STR7+" "->STR7
        c+1->c
    End

    If b=1
        STR7->STR1
    
    If b=2
        STR7->STR2

    If b=3
        STR7->STR3

    If b=4
        STR7->STR4

    # this is inefficient but I am lazy
    STR1+STR2+STR3+STR4->STR7
    
    # this is a fucking hack and is probably not optimal, but fuck tibasic
    " "+STR0+" "->STR0

    # this makes the new content only replace 1 line and if there's more insert itself
    sub(STR0,1,d)+STR7+sub(STR0,d+length(STR7),length(STR0)-d-length(STR7))->STR0

    ""->STR7 # clear var

    # unhack
    sub(STR0,2,length(STR0)-2)->STR0

    Goto rl

Lbl ac: # action

    Menu("action","<save+exit>",se,"<discard+exit>",de,"",ac,"<prev>",pp,"<next>",np,"",ac,"<back>",mm)

    Lbl pp: # prev
        d-e*f->d
        Goto rl

    Lbl np: # next
        d+e*f->d
        Goto rl

Lbl de: # discard and exit

STR9->STR0 # load saved string

Lbl se: # save and exit

""->STR1
""->STR2
""->STR3
""->STR4
""->STR7
""->STR8

prgmPOPF
prgmPOPE
prgmPOPD
prgmPOPC
prgmPOPB
prgmPOPA

STR0 # set Ans
