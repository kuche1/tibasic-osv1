
# TODO
#
# use something other than STR0 for storing the main data
#
# make an archiving wrapper around this

#input : Ans - string
#output: Ans - string ||| a - 0[don't save returned data] 1[save returned data]
#trash : STR0-STR5 STR7 STR8


Ans->STR0

prgmPUSHB
prgmPUSHC
prgmPUSHD
prgmPUSHE
prgmPUSHF
prgmPUSHG

###################### defines
14->e # characters per line
4->f # pages passed on press of prev/next
6->g # lines per screen; NOTE updating this number alone is not sufficient
###################### globals
1->d # start index
######################

If length(STR0)=0
    " "->STR0

Lbl rl # refresh lines

    # handle go back
    max(1,d)->d

    Disp "max..."

    # handle go forward
    STR0
    While length(Ans)<d+e*g-1
        Ans+" "
    End
    Ans->STR0

    Disp "cut..."

    # this seems like shit but is actually not too slow
    # needs to be updated alongside var `g`
    sub(STR0,d+e*0,e)->STR1
    sub(STR0,d+e*1,e)->STR2
    sub(STR0,d+e*2,e)->STR3
    sub(STR0,d+e*3,e)->STR4
    sub(STR0,d+e*4,e)->STR5
    sub(STR0,d+e*5,e)->STR6

    Disp "calc idx..."

    STR0->STR7

    (d-1)/e->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    "s"+STR0->STR8

    a+g->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" e"+STR0->STR8

    a+f->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" n"+STR0->STR8

    length(STR7)/e->a
    prgmNUMTOSTR
    #input : a
    #return: STR0
    #trash : L1 L2 Y1
    STR8+" t"+STR0->STR8

    STR7->STR0

    Disp "done"

Lbl mm # main menu

    # needs to be updated along with var `g`
    Menu(STR8,STR1,l1,STR2,l2,STR3,l3,STR4,l4,STR5,l5,STR6,l6,"<action>",ac)

    # needs to be updated along with var `g`
    Lbl l1
        1->b
        # STR1
        Goto la
    Lbl l2
        2->b
        # STR2
        Goto la
    Lbl l3
        3->b
        # STR3
        Goto la
    Lbl l4
        4->b
        # STR4
        Goto la
    Lbl l4
        5->b
        # STR5
        Goto la

    Lbl la # line action

    Menu("line action","<edit>",el,"<TODO insert>",la,"<TODO append>",la,"",la,"",la,"",la,"<delete>",dl)

    Lbl el # edit line

        # needs to be updated alongside var `g`
        If b=1
            STR1
        If b=2
            STR2
        If b=3
            STR3
        If b=4
            STR4
        If b=5
            STR5

        Goto pe

    Lbl dl # delete line

        " "
        # needs to be updated alongside var `g`
        If b!=1
            Ans+STR1
        If b!=2
            Ans+STR2
        If b!=3
            Ans+STR3
        If b!=4
            Ans+STR4
        If b!=5
            Ans+STR5
        
        sub(2,length(Ans)-1)->STR0

        Goto rl

    Lbl pe # prepare eidt

    # b - indicates which STR we're modifying

    Ans->STR7

    Disp "----------------"
    Disp ">>"+STR7
    Disp "----------------"
    Input ">>",STR7

    length(STR7)->c

    If c=0
    Then
        " "->STR7
        1->c
    End

    # fill with whitespace until is divisable by line
    While remainder(c,e)!=0
        STR7+" "->STR7
        c+1->c
    End

    # needs to be updated alongside var `g`

    If b=1
    Then
        STR7
    Else
        STR1
    End
    
    If b=2
    Then
        Ans+STR7
    Else
        Ans+STR2
    End

    If b=3
    Then
        Ans+STR7
    Else
        Ans+STR3
    End

    If b=4
    Then
        Ans+STR7
    Else
        Ans+STR4
    End

    If b=5
    Then
        Ans+STR7
    Else
        Ans+STR5
    End

    If b=6
    Then
        Ans+STR7
    Else
        Ans+STR6
    End

    Ans->STR7
    
    # fuck tibasic
    "?"+STR0+"?"->STR0
    d+1->d

    # this makes the new content only replace 1 line and if there's more insert itself
    sub(STR0,1,d-1) # prefix
    Ans+STR7 # middle part
    Ans+sub(STR0,d+length(STR7),length(STR0)-d-length(STR7)+1) # suffix

    # remove the useless chars added earlier
    sub(Ans,2,length(Ans)-2)->STR0
    d-1->d

    ""->STR7 # clear var

    Goto rl

Lbl ac: # action

    Menu("action","<save+exit>",se,"<discard+exit>",de,"",ac,"<prev>",pp,"<next>",np,"",ac,"<back>",mm)

    Lbl pp: # prev
        d-e*f->d
        Goto rl

    Lbl np: # next
        d+e*f->d
        Goto rl

    Lbl de: # discard and exit
        0->a # tell callee to not save returned data
        Goto rt

    Lbl se: # save and exit
        1->a # tell calee to save returned data
        Goto rt

Lbl rt: # return

""->STR1
""->STR2
""->STR3
""->STR4
""->STR5
""->STR7
""->STR8

prgmPOPG
prgmPOPF
prgmPOPE
prgmPOPD
prgmPOPC
prgmPOPB

STR0 # set Ans
